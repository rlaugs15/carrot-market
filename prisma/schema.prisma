// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma" //관계모드 설정, foreign Keys 제약 부여
}

model User {
  id         Int         @id @default(autoincrement()) //1~처럼 점점 증가할 것
  phone      String?     @unique //phone이 있을 때 값이 유일해짐,bigint or string 중에 택
  email      String?     @unique
  name       String
  avatar     String?
  createAt   DateTime    @default(now()) //new(): 새 유저가 만들어질 시점의 날짜를 넣어주는 함수
  updateAt   DateTime    @updatedAt //유저 업데이트
  Tokens     Token[]
  Products   Product[]
  Favs       Fav[]
  Posts      Post[]
  Answers    Answer[]
  Wonderings Wondering[]
}

//user의 User타입은 위의 모델, user User하고 저장하면 나머진 자동완성(위의 Token Token[]도), 몽구스의 리퍼런스와 비슷한 역할
//user와 userId를 가지는 이유는 실제 db에 user 전체 데이터가 들어가지 않기 때문, 대신 userId가 들어감
//userId에 들어가는 숫자가 User 모델의 id라고 해주는 것
model Token {
  id       Int      @id @default(autoincrement())
  payload  String   @unique //유저의 이메일, 폰 정보가 들어갈 것
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([userId])
}

//MediumText:  텍스트 데이터를 저장하기 위한 컬럼 타입 중 하나, 
//중간 정도 크기의 텍스트를 저장하기에 적합, 웹 사이트의 게시물 내용이나 댓글과 같은 텍스트 데이터를 저장할 때 활용 
model Product {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  image       String
  name        String
  price       Int
  description String   @db.MediumText
  Favs        Fav[]

  @@index([userId])
}

model Fav {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}

//질문자
model Post {
  id         Int         @id @default(autoincrement())
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  question   String      @db.MediumText
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  latitude   Float?
  longitude  Float?
  Answers    Answer[]
  Wonderings Wondering[]

  @@index([userId])
}

//답변자
model Answer {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  answer    String   @db.MediumText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([postId])
}

//동네생활 탭의 궁금해요 버튼
model Wondering {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([postId])
}
